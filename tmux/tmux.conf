###############################################################
# General Options
###############################################################
# enable 256 color support
set -g default-terminal "tmux-256color"
# set -sa terminal-overrides ",xterm*:Tc"
set -ga terminal-overrides ",*256col*:Tc"

# undercurl support
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# enable support for extended key sequences
set -s extended-keys always
# manually enable extended-keys feature
set -as terminal-features 'xterm*:extkeys'

# scrollback size
set -g history-limit 20000

# enable mouse support
set -g mouse on

# enable system clipboard
set -g set-clipboard on

# automatically renumber windows
set -g renumber-windows on

# set first window to index 1 (not 0)
set -g base-index 1
set -g pane-base-index 1

# make ESC delay shorter
set -sg escape-time 50

# change prefix from [ctrl+b] to [ctrl+<space>]
unbind C-b
set -g prefix C-Space

# ensure shell level begins at 1
set-environment -g SHLVL 1

# enable focus events
set -g focus-events on

# dynamically update window title
set -g set-titles on

# don't change tmux's own window titles.
setw -g automatic-rename on

# enable xterm key sequences
setw -g xterm-keys on

# add : to list of word separators
set -ga word-separators :/

# use vi motions when in copy-mode
setw -g mode-keys vi

###############################################################
# Keybinds
###############################################################
# allow prefix to be consumed by inner processes
bind-key -r C-Space send-prefix

# create new session based on current directory
bind-key C-b send-keys "tat" "C-m"

# create new session using session-manager
unbind-key C-e
bind-key C-e run-shell "tat edit"

# kill session(s) (except current) without leaving tmux
unbind-key C-k
bind-key C-k display-popup -h 40% -E "\
	tmux list-sessions -F '#{?session_attached,,#{session_name}}' |\
	sed '/^$/d' |\
	fzf -m --height=100% --header='Kill Inactive Sessions' |\
	xargs -I {} tmux kill-session -t {}"

# create new session using session-manager
unbind-key C-p
bind-key C-p display-popup -w 80% -h 80% -E "tat new"

# switch to an available session
unbind-key C-s
bind-key C-s run-shell "tat switch"

# new window
unbind-key C-t
bind-key C-t new-window

# kill pane
unbind-key C-w
bind-key C-w kill-pane

# cycle between windows
bind-key -r C-h select-window -t :-
bind-key -r C-l select-window -t :+

# cycle between two recent windows
unbind-key l
bind-key l last-window

# cycle between two recent sessions
unbind-key m
bind-key m switch-client -l

# move pane to new window
unbind-key b
bind-key b break-pane -d

# create new window in current working directory
unbind-key c
bind-key c new-window -c "#{pane_current_path}"

# reload tmux config
unbind-key r
bind-key r source-file ~/.config/tmux/tmux.conf \; display "Reloaded tmux config."

# redraw the client (if interrupted by wall, etc)
unbind-key R
bind-key R refresh-client

# show collapsed list of current sessions
unbind-key s
bind-key s choose-tree -swZ

# open "REPL" horizontal split
unbind-key t
# bind-key t split-window -f -l 15 -c "#{pane_current_path}"
bind-key t run-shell 'tat float'

# open "sidebar" vertical split
unbind-key T
bind-key T split-window -h -f -p 35 -c "#{pane_current_path}"

# create vertical split
unbind-key v
bind-key v split-window -h -c "#{pane_current_path}"

# create horizontal split
unbind-key -
bind-key - split-window -c "#{pane_current_path}"

# switch to next client
unbind-key )
# bind-key ) switch-client -n
bind-key ) run-shell 'tat switch-client-next'

# switch to previous client
unbind-key (
# bind-key ( switch-client -p
bind-key ( run-shell 'tat switch-client-previous'

###############################################################
# Keybinds: (n)vim integration
###############################################################
# pane resize shortcuts
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n 'M-h' if-shell "$is_vim" 'send-keys M-h' 'resize-pane -L 1'
bind-key -n 'M-j' if-shell "$is_vim" 'send-keys M-j' 'resize-pane -D 1'
bind-key -n 'M-k' if-shell "$is_vim" 'send-keys M-k' 'resize-pane -U 1'
bind-key -n 'M-l' if-shell "$is_vim" 'send-keys M-l' 'resize-pane -R 1'

bind-key -T copy-mode-vi M-h resize-pane -L 1
bind-key -T copy-mode-vi M-j resize-pane -D 1
bind-key -T copy-mode-vi M-k resize-pane -U 1
bind-key -T copy-mode-vi M-l resize-pane -R 1

# pane movement shortcuts
bind-key -n C-h if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
bind-key -n C-j if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
bind-key -n C-k if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
bind-key -n C-l if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'

bind-key -T copy-mode-vi 'C-h' if -F '#{pane_at_left}' '' 'select-pane -L'
bind-key -T copy-mode-vi 'C-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind-key -T copy-mode-vi 'C-k' if -F '#{pane_at_top}' '' 'select-pane -U'
bind-key -T copy-mode-vi 'C-l' if -F '#{pane_at_right}' '' 'select-pane -R'

###############################################################
# Keybinds: apps
###############################################################
unbind-key H
bind-key H display-popup -h 70% -w 90%  -E "htop"

if-shell -b 'uname -r | grep -i "microsoft$"' \
	"unbind-key C-y" \
	"bind-key C-y new-window 'pwsh.exe -NoLogo'"

###############################################################
# Keybinds: clipboard
###############################################################
# make per-character visual text selection
bind-key -T copy-mode-vi v send-keys -X begin-selection
# make line-based visual text selection
bind-key -T copy-mode-vi V send-keys -X select-line
# make block-wise visual text selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
# copy seleected text
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# on remote connections, use OSC52 script to handle clipboard copy/paste
if-shell -b '[ -n "$SSH_CONNECTION" -o -n "$SSH_TTY" -o -n "$SSH_CLIENT" ]' \
	"bind-key -T copy-mode-vi y send-keys -X copy-pipe osc52; \
	bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel osc52"

# inside WSL, send selections to Windows; otherwise defer to *nix
if-shell -b 'uname -r | grep -i "microsoft$"' \
	"bind-key -T copy-mode-vi y send-keys -X copy-pipe clip.exe; \
	bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel clip.exe" \
	"bind-key -T copy-mode-vi y send-keys -X copy-selection"

# stay in copy mode on mouse drag end event
unbind-key -T copy-mode-vi MouseDragEnd1Pane

###############################################################
# Styles
###############################################################
# enable the status line
set -g status on

# set the pane title
set -g set-titles-string "tmux: #S | #T"

# set refresh interval for updating the status line
set -g status-interval 5

# set status line alignment
set -g status-justify centre

# define pane border colors
set -g pane-border-style fg="brightBlack"
set -g pane-active-border-style fg="cyan"

# defing popup border colors
set -g popup-border-style fg="cyan"

# add top border to statusline
setw -g pane-border-status bottom
setw -g pane-border-format "â”€"

# define pane identifier colors
set -g display-panes-colour black
set -g display-panes-active-colour brightblack

# define pane identifier colors
set -g window-style bg="terminal"
set -g window-active-style bg="terminal"

# define clock options
set -g clock-mode-colour cyan

# Show bells in window titles.
set -g window-status-bell-style fg="yellow bold underscore"

# define message window colors
set -g message-style fg="green"
set -g message-command-style fg="cyan",bg="brightBlack"

# define mode colors
set -g mode-style fg="black",bg="yellow bold"

# define status line base colors
set -g status-style fg="colour243",bg="terminal"

# set max length of left status column
set -g status-left-length 40
# set information displayed to the left of the status line
set -g status-left "#{?client_prefix,#[fg=magenta],} #S"

# define the window list colors
setw -g window-status-style fg="colour181"
# set status line for the current window
setw -g window-status-current-style fg="blue"

# set the format for displaying windows
setw -g window-status-format "#[fg=colour248]#{?window_zoomed_flag,#[fg=red],} #I:#W "
# set the format for the current window
setw -g window-status-current-format "#[fg=cyan]#{?window_zoomed_flag,#[fg=red],} #I:#W "

# set character used to separate the window list
setw -g window-status-separator " "

# set information displayed to the right of the status line
set -g status-right "#[fg=colour243] %b %d %l:%M %p "

# set status line for windows with an acitivity alert
setw -g window-status-activity-style fg="black",bg="yellow"
# set status line for windows with a bell alert
setw -g window-status-bell-style fg="black",bg="red"
