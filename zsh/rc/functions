# find in history
function fh() {
	print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -r 's/ *[0-9]*\*? *//' | sed -r 's/\\/\\\\/g')
}

# fix corrupt history file
function fix_hist() {
	mv ${ZSH_CONFIG_HOME}/zsh_history ${ZSH_CONFIG_HOME}/zsh_hist_corrupt
	strings ${ZSH_CONFIG_HOME}/zsh_hist_corrupt > ${ZSH_CONFIG_HOME}/zsh_history
	fc -R ${ZSH_CONFIG_HOME}/zsh_history
	rm ${ZSH_CONFIG_HOME}/zsh_hist_corrupt
}

# try to run tmux with session management
function tmux() {
	emulate -L zsh

	# make sure even pre-existing tmux sessions use the latest SSH_AUTH_SOCK.
	local SOCK_SYMLINK=~/.ssh/ssh_auth_sock
	if [ -r "$SSH_AUTH_SOCK" -a ! -L "$SSH_AUTH_SOCK" ]; then
		ln -sf "$SSH_AUTH_SOCK" $SOCK_SYMLINK
	fi

	# if provided with args, pass them through.
	if [[ -n "$@" ]]; then
		env SSH_AUTH_SOCK=$SOCK_SYMLINK tmux "$@"
		return
	fi

	# check for .tmux file (poor man's tmuxinator).
	if [ -x .tmux ]; then
		# prompt the first time we see a given .tmux file before running it.
		local DIGEST="$(openssl dgst -sha512 .tmux)"
		if ! grep -q "$DIGEST" ${TMUX_CONFIG_HOME}/tmux.digests 2> /dev/null; then
			cat .tmux
			read -k 1 -r \
			'REPLY?Trust (and run) this .tmux file? (t = trust, otherwise = skip) '
			echo
			if [[ $REPLY =~ ^[Tt]$ ]]; then
				echo "$DIGEST" >> ${TMUX_CONFIG_HOME}/tmux.digests
				./.tmux
				return
			fi
		else
			./.tmux
			return
		fi
	fi

	# attach to existing session, or create one, based on current directory.
	local SESSION_NAME=$(basename "${$(pwd)//[.:]/_}")
	env SSH_AUTH_SOCK=$SOCK_SYMLINK tmux new -A -s "$SESSION_NAME"
}

function jump() {
	emulate -L zsh

	if [ $# -eq 0 ]; then
		fd
	else
		local DIR="${*%%/}"

		if [ $(hash -d|cut -d= -f1|grep -c "^${DIR}\$") = 0 ]; then
			# not in `hash -d`: use as initial argument to fd.
			fd "$*"
		else
			cd ~"$DIR"
		fi
	fi
}

function _jump_complete() {
	emulate -L zsh

	local COMPLETIONS
	COMPLETIONS="$(hash -d|cut -d= -f1)"
	reply=( "${(ps:\n:)COMPLETIONS}" )
}

# complete filenames and `hash -d` entries.
compctl -f -K _jump_complete jump
